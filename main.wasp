app boozeTube {
  wasp: {
    version: "^0.11.6"
  },
  title: "boozeTube",
  head: [
    "<script src='https://genius.codes'></script>",
    "<meta property='og:type' content='website' />",
    "<meta property='og:url' content='https://boozetube.netlify.app/' />",
    "<meta property='og:description' content='Turn any youTube video/song into a drinking game.' />",
    "<meta property='og:image' content='https://boozetube.netlify.app/assets/boozetube_thumbnail-6c4ea4c2.png' />",
    "<!-- Google tag (gtag.js) --><script async src='https://www.googletagmanager.com/gtag/js?id=G-MVZ4RN2EG9'></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-MVZ4RN2EG9');</script>",
    // "<link rel='shortcut icon' href='/a.png' />"
  ],
  client: {
    rootComponent: import App from "@client/App",
  },
  db: { system: PostgreSQL },
  dependencies: [
    ("puppeteer", "19.11.1"),
    ("googleapis", "118.0.0"),
    ("react-youtube", "10.1.0"),
    ("youtube-captions-scraper", "2.0.1"),
    ("react-hot-toast", "2.4.1"),
    ("@chakra-ui/react", "1.8.8"),
    ("react-icons", "4.8.0"),
    ("@emotion/react", "11.10.6"),
    ("@emotion/styled", "11.10.6"),
    ("framer-motion", "6.5.1"),
    ("react-hook-form", "^7.45.4"),
    ("openai", "3.2.1"),
    ("ytdl-core", "4.11.4"),
    ("axios", "^1.4.0"),
    ("cheerio", "1.0.0-rc.12")
  ]
}

entity YouTuber {=psl
  id               String         @id @unique
  name             String
  url              String?
  captions         Caption[]
psl=}

entity Caption {=psl
  videoId          String        @id @unique
  videoTitle       String?
  thumbnail        String?
  youTuber         YouTuber      @relation(fields: [youTuberId], references: [id])
  youTuberId       String
  captionChunks    String
  transcribedWithLyrics Boolean? 
psl=}


route RootRoute { path: "/", to: MainPage }
page MainPage {
  component: import { MainPage } from "@client/MainPage.tsx"
}

route TranscribeRoute { path: "/transcribe/:videoId", to: TranscribePage }
page TranscribePage {
  component: import { TranscribePage } from "@client/TranscribePage.tsx"
}

query getRepeatedWords {
  fn: import { getRepeatedWords } from "@server/queries.js",
  entities: [Caption]
}

query getCaptions {
  fn: import { getCaptions } from "@server/queries.js",
  entities: [Caption]
}

query getVideoInfo {
  fn: import { getVideoInfo } from "@server/queries.js",
  entities: [Caption]
}

query getCaptionsInfo {
  fn: import { getCaptionsInfo } from "@server/queries.js",
  entities: [Caption]
}

action scrapeCaptionsAndSave {
  fn: import { scrapeCaptionsAndSave } from "@server/actions.js",
  entities: [Caption, YouTuber]
}

action generateCaptionsAndSave {
  fn: import { generateCaptionsAndSave } from "@server/actions.js",
  entities: [Caption, YouTuber]
}
